[MLP]
## Neural network hyperparameters
# Number of dimensions in generator seed (Input dimension)
latent_dim = 99
# Number of Km parameters in the model (No of parameters to be generated, Output dimension) 
; no_kms = 
# Number of parameter sets to be generated each time    
n_samples = 100
# Number of neurons in each layer of the generator
layer_1 = 256
layer_2 = 512
layer_3 = 1024

[PATHS]
# Base layer folder path
base = ../models/
# Metabolic model being analyzed. All data are loaded accordingly from the folder '/Models' in supplementary data
met_model = ecoli_shikki_regulation
# Kinetic model file name, in yaml format
model_file = kin_varma_curated.yaml
# The allosteric regulation that's needed to be added to the model
regulation_file = allosteric_regulations.csv
# The path for the steady states data
steady_states_file = steady_states.csv
# Thermodynamic model in json file
thermo_experiment_file = varma_fdp1.json
# Parameter file in hdf5 format 
kinetic_params_file = kinetic_params_top_10_models.hdf5
# Output folder for renaissance (stores reward)
output_path = output/rnsc_opt/
# Output file for generated parameter names
generated_parameter_names = generated_parameters.pkl

[CONSTRAINTS]
## Custom constraints
# Minimum value of generated Kms = exp(-25)
min_km = -25 
# Maximum value of generated Kms = exp(3)
max_km = 0

[EVOSTRAT]
# Number of statistical repeats
repeats = 15
# Saving step (How often to save weights during optimisation process)
save_step = 1 
# Number og evolution generations
generations = 25
# Population size of generators
pop_size = 20
# Noise (Search Radius)
noise = 0.01
# Learning rate
lr = 1e-3
#learning rate decay per generation (0.95 means 5% decay per gen)
decay = 0.95
# Index of the steady state to generate kinetic models around (there are 5000 steady states in the data provided)
ss_idx = 1712
# Number of threads
n_threads = 60

[REWARDS]
# Desired optimisation objective ( Flag 0 - Push for max incidince of valid models; Flag 1 - Push for fastest dynamic possible)
reward_flag = 0
# Number of fastest eigenvalues to consider when Flag = 1
n_consider  = 10 
# eigenvalue partition between valid and invalid models
eig_partition = -2.5

[PARAMETER_FIXING]
# Parameter fixing flag ( 1 - Enabled/ 0 - Disabled)
pf_flag = 0
# Path to fixed parameter names (must be .csv, must follow naming convention of kinetic model being used)
fixed_parameter_names = /path/to/fixed/Km/names.csv
# Path to fixed parameter ranges (must be numpy array of min and max km of every fixed km in mM)
fixed_parameter_ranges = /path/to/fixed/Km/km_ranges.npy

[LOAD_AND_GENERATE]
# path to saved weights
path_to_weights = ../output/rnsc_opt/repeat_7/weights_21.pkl
# Number of parameter sets to generate (1 million sets takes ~20s)
n_sets = 10
# Output path yo save as .hdf5 format
path_output = ../output/rnsc_opt/
# Output name 
name_output = gen_7_21_parameters
# 
[ODE_INTEGRATION]
# Path to full parameter set (must be .hdf5 format, see step above)
path_to_parameter_set  = output/toy_data/gen_x_parameters.hdf5
# Percent perturbation (perturbation to steady state, 0.1 means steady state conditions will be pertubed upto +/- 10% before integration and used as initial condition)
pc_perturbed = 0.25
# Output path yo save as .hdf5 format
path_output = output/toy_data/
# Output name  
name_output = gen_x_parameters

[BIOREACTOR]
# Cellular parameters
# 1 mol to 1 mmol
CONCENTRATION_SCALING = 1e9  
 # 1hr
TIME_SCALING = 1
# g/L 
DENSITY = 1105
# Assumes 70% Water
GDW_GWW_RATIO = 0.3  
# The volume of the reactor
REACTOR_VOLUME = 5e13
# Maximum time that a bioreactor can run the ODE simulation
MAX_TIME = 60
# The total time that that the ODE is evaluated
TOTAL_TIME = 60
# Number of time steps
N_STEPS = 1000
# Usage of number of CPU
N_CPU = 32
# path of the parameter set that is going to be simulated
path_to_parameter_set  = output/rnsc_opt/gen_24_parameters.hdf5
# File containing all the initial conditions for bioreactors from experimental data
path_to_initiator = bioreactor_initiator.yaml
# Output path
path_output = output/
# Output name
name_output = gen_x_parameters





